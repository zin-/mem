plugins {
  id "com.android.application"
  id "kotlin-android"
  // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
  id "dev.flutter.flutter-gradle-plugin"
}

def flutterCompileSdkVersion = flutter.compileSdkVersion
def flutterNdkVersion = '26.3.11579264'
//println("flutter.ndkVersion: $flutter.ndkVersion") // => 23.1.7779620
//def flutterNdkVersion = flutter.ndkVersion
def flutterMinSdkVersion = flutter.minSdkVersion
def flutterTargetSdkVersion = flutter.targetSdkVersion
def javaVersion = JavaVersion.VERSION_1_8

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties') as File
if (localPropertiesFile.exists()) {
  localPropertiesFile.withReader('UTF-8') { reader ->
    localProperties.load(reader)
  }
}
def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties') as File
if (keystorePropertiesFile.exists()) {
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


android {
  namespace 'zin.playground.mem'

  compileSdk = flutterCompileSdkVersion
  ndkVersion = flutterNdkVersion

  compileOptions {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    coreLibraryDesugaringEnabled true
  }

  kotlinOptions {
    jvmTarget = javaVersion
  }

  defaultConfig {
    applicationId 'zin.playground.mem'

    // You can update the following values to match your application needs.
    // For more information, see: https://flutter.dev/to/review-gradle-config.
    minSdk = flutterMinSdkVersion
    targetSdk = flutterTargetSdkVersion
    versionCode = flutterVersionCode.toInteger()
    versionName = flutterVersionName
  }

  signingConfigs {
    release {
      keyAlias keystoreProperties.getProperty('keyAlias')
      keyPassword keystoreProperties.getProperty('keyPassword')
      storeFile keystoreProperties.getProperty('storeFile') ? file(keystoreProperties.getProperty('storeFile')) : null
      storePassword keystoreProperties.getProperty('storePassword')
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

flutter {
  source '../..'
}

dependencies {
  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.2'

  // conflict:
  // - work-runtime-2.8.1-runtime (from workmanager: 0.5.2)
  // and
  // - work-runtime-ktx-2.7.1-runtime ( from home_widget: 0.6.0)
  implementation 'androidx.work:work-runtime:2.10.0'

  // flutter_local_notificationsの利用に必要になるらしい
  implementation 'androidx.window:window:1.3.0'
  implementation 'androidx.window:window-java:1.3.0'
}
