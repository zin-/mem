name: "Run Android Medium test via direct AVD management"
description: "Run Android Medium test via direct AVD management without reactivecircus."

inputs:
  script:
    description: "script"
    required: true
  android-api-level:
    description: "android-api-level"
    required: true
  android-target:
    description: "android-target"
    required: true
  android-arch:
    description: "android-arch"
    required: true

runs:
  using: "composite"

  steps:
    - name: "AVD cache"
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          /tmp/android-avd/*
          ~/.android/adb*
        key: avd-${{ inputs.android-api-level }}-${{ inputs.android-target }}-${{ inputs.android-arch }}-direct-v3
        restore-keys: |
          avd-${{ inputs.android-api-level }}-${{ inputs.android-target }}-${{ inputs.android-arch }}-direct-
          avd-${{ inputs.android-api-level }}-${{ inputs.android-target }}-direct-
          avd-${{ inputs.android-api-level }}-direct-

    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
      shell: bash


    - name: Set up Android SDK and tools
      if: steps.avd-cache.outputs.cache-hit != 'true'
      run: |
        # GitHub ActionsのAndroid SDKパスを使用
        echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
        echo "ANDROID_AVD_HOME=/tmp/android-avd" >> $GITHUB_ENV
        echo "/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
        echo "/usr/local/lib/android/sdk/emulator" >> $GITHUB_PATH
        echo "/usr/local/lib/android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        
        # 必要なSDKコンポーネントをインストール
        echo "y" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-${{ inputs.android-api-level }};${{ inputs.android-target }};${{ inputs.android-arch }}"
        echo "y" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "platform-tools"
        echo "y" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-${{ inputs.android-api-level }}"
        echo "y" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "emulator"
        echo "y" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.0"
      shell: bash

    - name: Create AVD
      if: steps.avd-cache.outputs.cache-hit != 'true'
      run: |
        # AVDディレクトリを作成
        mkdir -p /tmp/android-avd
        
        # 環境変数を設定
        export ANDROID_AVD_HOME=/tmp/android-avd
        
        # シンプルにAVDを作成（容量制限付き）
        echo "no" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager create avd \
          -n test \
          -k "system-images;android-${{ inputs.android-api-level }};${{ inputs.android-target }};${{ inputs.android-arch }}" \
          -d "pixel_3a" \
          --force
        
        # AVD設定ファイルを編集してuserdataパーティションサイズを制限
        if [ -f /tmp/android-avd/test.avd/config.ini ]; then
          echo "Editing AVD config to limit userdata partition size..."
          sed -i 's/disk.dataPartition.size=.*/disk.dataPartition.size=1024M/' /tmp/android-avd/test.avd/config.ini
          # SDカードサイズも制限
          sed -i 's/sdcard.size=.*/sdcard.size=128MB/' /tmp/android-avd/test.avd/config.ini
          # RAMサイズも制限
          sed -i 's/hw.ramSize=.*/hw.ramSize=1024/' /tmp/android-avd/test.avd/config.ini
          # 追加の容量制限設定
          echo "disk.dataPartition.size=1024M" >> /tmp/android-avd/test.avd/config.ini
          echo "sdcard.size=128MB" >> /tmp/android-avd/test.avd/config.ini
          echo "hw.ramSize=1024" >> /tmp/android-avd/test.avd/config.ini
          echo "AVD config updated:"
          cat /tmp/android-avd/test.avd/config.ini
        fi
        
        # AVDが作成されたか確認
        echo "AVD directory contents:"
        ls -la /tmp/android-avd/
        echo "Available AVDs:"
        /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager list avd
        
        # AVD設定ファイルの内容を確認
        if [ -f /tmp/android-avd/test.ini ]; then
          echo "test.ini contents:"
          cat /tmp/android-avd/test.ini
        else
          echo "test.ini not found in /tmp/android-avd/"
        fi
      shell: bash

    - name: Start emulator
      run: |
        # 環境変数を設定
        export ANDROID_AVD_HOME=/tmp/android-avd
        
        # AVDの存在を確認
        echo "Available AVDs:"
        /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager list avd
        
        # AVDディレクトリの内容を確認
        echo "AVD directory contents:"
        ls -la /tmp/android-avd/
        
        # test.iniファイルの存在確認
        if [ -f /tmp/android-avd/test.ini ]; then
          echo "test.ini found:"
          cat /tmp/android-avd/test.ini
        else
          echo "ERROR: test.ini not found in /tmp/android-avd/"
          echo "Creating test.ini manually..."
          echo "avd.ini.encoding=UTF-8" > /tmp/android-avd/test.ini
          echo "path=/tmp/android-avd/test.avd" >> /tmp/android-avd/test.ini
          echo "path.rel=test.avd" >> /tmp/android-avd/test.ini
          echo "target=android-${{ inputs.android-api-level }}" >> /tmp/android-avd/test.ini
        fi
        
        # エミュレーターを起動
        /usr/local/lib/android/sdk/emulator/emulator -avd test -no-window -no-audio -gpu swiftshader_indirect &
        
        # エミュレーターの起動を待機
        /usr/local/lib/android/sdk/platform-tools/adb wait-for-device
        /usr/local/lib/android/sdk/platform-tools/adb shell input keyevent 82
        
        # エミュレーターが完全に起動するまで待機
        timeout 300 bash -c 'until /usr/local/lib/android/sdk/platform-tools/adb shell getprop sys.boot_completed | grep -q 1; do sleep 5; done'
      shell: bash

    - name: Run test script
      run: ${{ inputs.script }}
      shell: bash

    - name: Stop emulator
      if: always()
      run: |
        /usr/local/lib/android/sdk/platform-tools/adb emu kill || true
        pkill -f emulator || true
      shell: bash