name: "Run Android Medium test via direct AVD management"
description: "Run Android Medium test via direct AVD management without reactivecircus."

inputs:
  script:
    description: "script"
    required: true
  android-api-level:
    description: "android-api-level"
    required: true
  android-target:
    description: "android-target"
    required: true
  android-arch:
    description: "android-arch"
    required: true

runs:
  using: "composite"

  steps:
    - name: "AVD cache"
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ inputs.android-api-level }}-${{ inputs.android-target }}-${{ inputs.android-arch }}-direct-v3
        restore-keys: |
          avd-${{ inputs.android-api-level }}-${{ inputs.android-target }}-${{ inputs.android-arch }}-direct-
          avd-${{ inputs.android-api-level }}-${{ inputs.android-target }}-direct-
          avd-${{ inputs.android-api-level }}-direct-

    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
      shell: bash


    - name: Set up Android SDK and tools
      if: steps.avd-cache.outputs.cache-hit != 'true'
      run: |
        # Android SDKの環境変数を設定
        echo "ANDROID_HOME=$HOME/Android/Sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/Android/Sdk" >> $GITHUB_ENV
        echo "$HOME/Android/Sdk/platform-tools" >> $GITHUB_PATH
        echo "$HOME/Android/Sdk/emulator" >> $GITHUB_PATH
        echo "$HOME/Android/Sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        
        # 必要なSDKコンポーネントをインストール
        echo "y" | sdkmanager --install "system-images;android-${{ inputs.android-api-level }};${{ inputs.android-target }};${{ inputs.android-arch }}"
        echo "y" | sdkmanager --install "platform-tools"
        echo "y" | sdkmanager --install "platforms;android-${{ inputs.android-api-level }}"
        echo "y" | sdkmanager --install "emulator"
        echo "y" | sdkmanager --install "build-tools;33.0.0"
      shell: bash

    - name: Create AVD
      if: steps.avd-cache.outputs.cache-hit != 'true'
      run: |
        # シンプルにAVDを作成
        echo "no" | avdmanager create avd \
          -n test \
          -k "system-images;android-${{ inputs.android-api-level }};${{ inputs.android-target }};${{ inputs.android-arch }}" \
          --force
      shell: bash

    - name: Start emulator
      run: |
        # エミュレーターを起動
        emulator -avd test -no-window -no-audio -gpu swiftshader_indirect &
        
        # エミュレーターの起動を待機
        adb wait-for-device
        adb shell input keyevent 82
        
        # エミュレーターが完全に起動するまで待機
        timeout 300 bash -c 'until adb shell getprop sys.boot_completed | grep -q 1; do sleep 5; done'
      shell: bash

    - name: Run test script
      run: ${{ inputs.script }}
      shell: bash

    - name: Stop emulator
      if: always()
      run: |
        adb emu kill || true
        pkill -f emulator || true
      shell: bash