name: "Run Android Medium test"
description: "Run Android Medium test on Android emulator."

inputs:
  script:
    description: "script"
    required: true
  android-api-level:
    description: "android-api-level"
    required: true
  android-target:
    description: "android-target"
    required: true
  android-arch:
    description: "android-arch"
    required: true

runs:
  using: "composite"

  steps:
    - name: Free disk space
      uses: jlumbroso/free-disk-space@main
      with:
        android: false

    - name: "AVD cache"
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          /tmp/android-avd/*
          ~/.android/adb*
        key: avd-${{ inputs.android-api-level }}-${{ inputs.android-target }}-${{ inputs.android-arch }}
        restore-keys: |
          avd-${{ inputs.android-api-level }}-${{ inputs.android-target }}-${{ inputs.android-arch }}-
          avd-${{ inputs.android-api-level }}-${{ inputs.android-target }}-
          avd-${{ inputs.android-api-level }}-

    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
      shell: bash


    - name: Set up Android SDK and tools
      run: |
        # GitHub ActionsのAndroid SDKパスを使用
        echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
        echo "ANDROID_AVD_HOME=/tmp/android-avd" >> $GITHUB_ENV
        echo "/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
        echo "/usr/local/lib/android/sdk/emulator" >> $GITHUB_PATH
        echo "/usr/local/lib/android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        
        # SDKの存在確認とインストール
        if [ ! -f "/usr/local/lib/android/sdk/emulator/emulator" ]; then
          echo "Android SDK emulator not found, installing..."
          echo "y" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "emulator"
        fi
        
        if [ ! -f "/usr/local/lib/android/sdk/platform-tools/adb" ]; then
          echo "Android SDK platform-tools not found, installing..."
          echo "y" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "platform-tools"
        fi
        
        # システムイメージの存在確認とインストール（常に実行）
        SYSTEM_IMAGE_PATH="/usr/local/lib/android/sdk/system-images/android-${{ inputs.android-api-level }}/${{ inputs.android-target }}/${{ inputs.android-arch }}"
        if [ ! -d "$SYSTEM_IMAGE_PATH" ]; then
          echo "System image not found at $SYSTEM_IMAGE_PATH, installing..."
          echo "y" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-${{ inputs.android-api-level }};${{ inputs.android-target }};${{ inputs.android-arch }}"
        else
          echo "System image already exists at $SYSTEM_IMAGE_PATH"
        fi
        
        # その他のSDKコンポーネントをインストール（キャッシュヒット時はスキップ）
        if [ "${{ steps.avd-cache.outputs.cache-hit }}" != "true" ]; then
          echo "Installing other Android SDK components..."
          echo "y" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-${{ inputs.android-api-level }}"
          echo "y" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.0"
        fi
        
        # SDKの状態を確認
        echo "Android SDK status:"
        ls -la /usr/local/lib/android/sdk/emulator/ || echo "Emulator directory not found"
        ls -la /usr/local/lib/android/sdk/platform-tools/ || echo "Platform-tools directory not found"
      shell: bash

    - name: Create AVD
      run: |
        # AVDディレクトリを作成
        mkdir -p /tmp/android-avd
        
        # 環境変数を設定
        export ANDROID_AVD_HOME=/tmp/android-avd
        
        # システムイメージの存在確認
        SYSTEM_IMAGE_PATH="/usr/local/lib/android/sdk/system-images/android-${{ inputs.android-api-level }}/${{ inputs.android-target }}/${{ inputs.android-arch }}"
        echo "Checking system image at: $SYSTEM_IMAGE_PATH"
        if [ ! -d "$SYSTEM_IMAGE_PATH" ]; then
          echo "ERROR: System image not found at $SYSTEM_IMAGE_PATH"
          echo "Available system images:"
          find /usr/local/lib/android/sdk/system-images -type d -name "*${{ inputs.android-arch }}" 2>/dev/null || echo "No system images found"
          exit 1
        fi
        
        echo "System image found, checking AVD status..."
        
        # 既存のAVDを確認
        if [ -f "/tmp/android-avd/test.ini" ] && [ -d "/tmp/android-avd/test.avd" ]; then
          echo "AVD already exists, checking if it's valid..."
          # AVDの有効性を確認
          if /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager list avd | grep -q "test"; then
            echo "AVD 'test' is valid and ready"
          else
            echo "AVD 'test' exists but is invalid, recreating..."
            rm -rf /tmp/android-avd/test.ini /tmp/android-avd/test.avd
          fi
        else
          echo "AVD does not exist, creating new AVD..."
        fi
        
        # AVDが存在しない場合は作成
        if [ ! -f "/tmp/android-avd/test.ini" ] || [ ! -d "/tmp/android-avd/test.avd" ]; then
          echo "Creating AVD..."
          # シンプルにAVDを作成（容量制限付き）
          echo "no" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager create avd \
            -n test \
            -k "system-images;android-${{ inputs.android-api-level }};${{ inputs.android-target }};${{ inputs.android-arch }}" \
            -d "pixel_3a" \
            --force
        fi
        
        # AVD設定ファイルを編集してuserdataパーティションサイズを制限
        if [ -f /tmp/android-avd/test.avd/config.ini ]; then
          echo "Editing AVD config to limit userdata partition size..."
          sed -i 's/disk.dataPartition.size=.*/disk.dataPartition.size=1024M/' /tmp/android-avd/test.avd/config.ini
          # SDカードサイズも制限
          sed -i 's/sdcard.size=.*/sdcard.size=128MB/' /tmp/android-avd/test.avd/config.ini
          # RAMサイズも制限
          sed -i 's/hw.ramSize=.*/hw.ramSize=1024/' /tmp/android-avd/test.avd/config.ini
          # 追加の容量制限設定
          echo "disk.dataPartition.size=1024M" >> /tmp/android-avd/test.avd/config.ini
          echo "sdcard.size=128MB" >> /tmp/android-avd/test.avd/config.ini
          echo "hw.ramSize=1024" >> /tmp/android-avd/test.avd/config.ini
          echo "AVD config updated:"
          cat /tmp/android-avd/test.avd/config.ini
        fi
        
        # AVDが作成されたか確認
        echo "AVD directory contents:"
        ls -la /tmp/android-avd/
        echo "Available AVDs:"
        /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager list avd
        
        # AVD設定ファイルの内容を確認
        if [ -f /tmp/android-avd/test.ini ]; then
          echo "test.ini contents:"
          cat /tmp/android-avd/test.ini
        else
          echo "test.ini not found in /tmp/android-avd/"
        fi
      shell: bash

    - name: Start emulator
      run: |
        # 環境変数を設定
        export ANDROID_AVD_HOME=/tmp/android-avd
        
        # SDKツールの存在確認
        echo "Checking Android SDK tools..."
        if [ ! -f "/usr/local/lib/android/sdk/emulator/emulator" ]; then
          echo "ERROR: Android emulator not found at /usr/local/lib/android/sdk/emulator/emulator"
          echo "Available files in emulator directory:"
          ls -la /usr/local/lib/android/sdk/emulator/ || echo "Emulator directory does not exist"
          exit 1
        fi
        
        if [ ! -f "/usr/local/lib/android/sdk/platform-tools/adb" ]; then
          echo "ERROR: ADB not found at /usr/local/lib/android/sdk/platform-tools/adb"
          echo "Available files in platform-tools directory:"
          ls -la /usr/local/lib/android/sdk/platform-tools/ || echo "Platform-tools directory does not exist"
          exit 1
        fi
        
        # AVDの存在を確認
        echo "Available AVDs:"
        /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager list avd
        
        # AVDディレクトリの内容を確認
        echo "AVD directory contents:"
        ls -la /tmp/android-avd/
        
        # test.iniファイルの存在確認
        if [ -f /tmp/android-avd/test.ini ]; then
          echo "test.ini found:"
          cat /tmp/android-avd/test.ini
        else
          echo "ERROR: test.ini not found in /tmp/android-avd/"
          echo "Creating test.ini manually..."
          echo "avd.ini.encoding=UTF-8" > /tmp/android-avd/test.ini
          echo "path=/tmp/android-avd/test.avd" >> /tmp/android-avd/test.ini
          echo "path.rel=test.avd" >> /tmp/android-avd/test.ini
          echo "target=android-${{ inputs.android-api-level }}" >> /tmp/android-avd/test.ini
        fi
        
        # エミュレーターを起動
        echo "Starting Android emulator..."
        /usr/local/lib/android/sdk/emulator/emulator -avd test -no-window -no-audio -gpu swiftshader_indirect &
        EMULATOR_PID=$!
        
        # エミュレーターの起動を待機
        echo "Waiting for emulator to start..."
        /usr/local/lib/android/sdk/platform-tools/adb wait-for-device
        
        # エミュレーターが完全に起動するまで待機
        echo "Waiting for emulator to fully boot..."
        timeout 300 bash -c 'until /usr/local/lib/android/sdk/platform-tools/adb shell getprop sys.boot_completed | grep -q 1; do sleep 5; done'
        
        # エミュレーターが完全に起動した後にキーイベントを送信
        echo "Emulator is ready, sending key event..."
        /usr/local/lib/android/sdk/platform-tools/adb shell input keyevent 82
        
        echo "Emulator started successfully with PID: $EMULATOR_PID"
      shell: bash

    - name: Run test script
      run: ${{ inputs.script }}
      shell: bash

    - name: Stop emulator
      if: always()
      run: |
        /usr/local/lib/android/sdk/platform-tools/adb emu kill || true
        pkill -f emulator || true
      shell: bash